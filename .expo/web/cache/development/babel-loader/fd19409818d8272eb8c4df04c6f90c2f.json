{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/kristiina/code/bird-observation-app/bird-observation-app/components/Mapview.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport API_KEY from \"./apikey\";\nexport default function Map() {\n  var _useState = useState({\n    latitude: 60.200692,\n    longitude: 24.934302,\n    latitudeDelta: 0.0322,\n    longitudeDelta: 0.0221\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var url = \"http://www.mapquestapi.com/geocoding/v1/reverse?key=\" + API_KEY + \"&location=\" + location.latitude + \",\" + location.longitude + \"&includeRoadMetadata=true&includeNearestIntersection=true\";\n  useEffect(function () {\n    getLocation();\n  }, []);\n\n  var getLocation = function getLocation() {\n    var _await$Location$reque, status, _location;\n\n    return _regeneratorRuntime.async(function getLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n          case 2:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context.next = 8;\n              break;\n            }\n\n            Alert.alert('No permission to access location');\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n          case 10:\n            _location = _context.sent;\n            setLocation(_objectSpread(_objectSpread({}, _location), {}, {\n              latitude: _location.coords.latitude,\n              longitude: _location.coords.longitude\n            }));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onDragEvent = function onDragEvent(e) {\n    var address;\n    return _regeneratorRuntime.async(function onDragEvent$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(e.nativeEvent);\n            setLocation(_objectSpread(_objectSpread({}, location), {}, {\n              latitude: e.nativeEvent.coordinate.latitude,\n              longitude: e.nativeEvent.coordinate.longitude\n            }));\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetchAddress());\n\n          case 4:\n            address = _context2.sent;\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var fetchAddress = function fetchAddress() {\n    var response, data;\n    return _regeneratorRuntime.async(function fetchAddress$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"OLLAAN FETCHISSÖ\");\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 3:\n            response = _context3.sent;\n            console.log(response);\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            data = _context3.sent;\n            console.log(\"LOCATION FETCHISSÄ\", data.locations);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(MapView, {\n    style: styles.map,\n    region: {\n      latitude: parseFloat(location.latitude),\n      longitude: parseFloat(location.longitude),\n      latitudeDelta: 0.0030,\n      longitudeDelta: 0.00500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, React.createElement(Marker, {\n    draggable: true,\n    coordinate: {\n      latitude: parseFloat(location.latitude),\n      longitude: parseFloat(location.longitude)\n    },\n    onDragEnd: function onDragEnd(e) {\n      return onDragEvent(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  map: {\n    flex: 1,\n    height: 400,\n    width: '100%'\n  }\n});","map":{"version":3,"sources":["/home/kristiina/code/bird-observation-app/bird-observation-app/components/Mapview.js"],"names":["StatusBar","React","useState","useEffect","MapView","Marker","Location","API_KEY","Map","latitude","longitude","latitudeDelta","longitudeDelta","location","setLocation","isLoading","setIsLoading","url","getLocation","requestPermissionsAsync","status","Alert","alert","getCurrentPositionAsync","coords","onDragEvent","e","console","log","nativeEvent","coordinate","fetchAddress","address","fetch","response","json","data","locations","styles","map","parseFloat","StyleSheet","create","flex","height","width"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { Alert, StyleSheet, Text, View } from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport API_KEY from './apikey'\n\nexport default function Map() {\n    const [location, setLocation] = useState({ latitude: 60.200692, longitude: 24.934302, latitudeDelta: 0.0322, longitudeDelta: 0.0221 })\n    const [isLoading, setIsLoading] = useState(false) //should i use this when dowloading?\n\n    const url = `http://www.mapquestapi.com/geocoding/v1/reverse?key=${API_KEY}&location=${location.latitude},${location.longitude}&includeRoadMetadata=true&includeNearestIntersection=true`\n    //http://www.mapquestapi.com/geocoding/v1/reverse?key=KnHd7lruMpGlhnJTiu1uV7la1W4Q5tAQ&location=60.200692,24.934302&includeRoadMetadata=true&includeNearestIntersection=true\n\n    // if location is not abled make something else??\n\n    useEffect(() => {\n        getLocation()\n        //console.log(\"LOCATION ON\", location)\n    }, [])\n\n    const getLocation = async () => {\n        let { status } = await Location.requestPermissionsAsync()\n        if (status !== 'granted') {\n            Alert.alert('No permission to access location')\n        } else {\n            let location = await Location.getCurrentPositionAsync({})\n            //setLocation(location)\n            setLocation({ ...location, latitude: location.coords.latitude, longitude: location.coords.longitude })\n            //console.log(\"LOCATION ON\", location)\n        }\n    }\n\n    const onDragEvent = async (e) => {\n        console.log(e.nativeEvent)\n        setLocation({ ...location, latitude: e.nativeEvent.coordinate.latitude, longitude: e.nativeEvent.coordinate.longitude })\n        //tähän se osoite??\n        let address = await fetchAddress()\n        //Alert.alert(\"use this?\")\n        \n        /*Alert.alert('Use this place?',\n            [\n                {\n                    //navigate to add page\n                    text: \"Confirm\",\n                    onPress:()=> console.log(\"confrim pressed\")\n\n                },\n                {\n                    //back to map\n                    text: \"Cancel\",\n                    onPress:()=> console.log(\"cancel pressed\")\n\n                }\n            ])*/\n\n    }\n\n    const fetchAddress = async () => {\n        console.log(\"OLLAAN FETCHISSÖ\")\n        let response = await fetch(url)\n        console.log(response)\n        let data = await response.json()\n        console.log(\"LOCATION FETCHISSÄ\", data.locations)\n        //return data.locations\n\n    }\n\n    return (\n        <MapView\n            style={styles.map}\n            region={{\n                latitude: parseFloat(location.latitude),\n                longitude: parseFloat(location.longitude),\n                latitudeDelta: 0.0030,\n                longitudeDelta: 0.00500\n            }}\n        >\n            <Marker\n                draggable\n                coordinate={{\n                    latitude: parseFloat(location.latitude),\n                    longitude: parseFloat(location.longitude)\n                }}\n                onDragEnd={(e) => onDragEvent(e)}>\n            </Marker>\n\n        </MapView>\n\n    )\n\n}\n\nconst styles = StyleSheet.create({\n    map: {\n        flex: 1,\n        height: 400,\n        width: '100%'\n    }\n\n})\n\n\n\n"]},"metadata":{},"sourceType":"module"}